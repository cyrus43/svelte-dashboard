(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1588148005118;

	const files = [
		"service-worker-index.html",
		"dashboard.gif",
		"error-404-monochrome.svg",
		"favicon.png",
		"global.css",
		"great-success.png",
		"logo-192.png",
		"logo-512.png",
		"manifest.json",
		"sb-admin.css"
	];

	const shell = [
		"client/client.f7328292.js",
		"client/BreadcrumbItem.0f268714.js",
		"client/CardBody.d1afdeb2.js",
		"client/CardHeader.5b86d1fe.js",
		"client/CardText.5bfd653e.js",
		"client/index.2751ee6c.js",
		"client/Row.b6554342.js",
		"client/CardFooter.b5454637.js",
		"client/Table.173f6c2f.js",
		"client/Image.c69ca355.js",
		"client/AreaChart.aefcf3d1.js",
		"client/BarChart.80d17d21.js",
		"client/activity_log.54c2d91f.js",
		"client/FormGroup.489cf210.js",
		"client/settings.15601c62.js",
		"client/static_navigation.34ed44da.js",
		"client/light_sidenav.f2b31579.js",
		"client/charts.df6f4fb4.js",
		"client/tables.7171a3c2.js",
		"client/_layout.f4eef795.js",
		"client/login.b6ed0170.js",
		"client/Col.8e346e57.js",
		"client/register.7f9a8820.js",
		"client/forget_password.5b4290c9.js",
		"client/_layout.90f64619.js",
		"client/error_401.41b07c52.js",
		"client/error_404.dfbb63e7.js",
		"client/error_500.4551cd4d.js",
		"client/_layout.03c0edcc.js",
		"client/index.27cb0060.js",
		"client/[slug].84d22cf8.js",
		"client/sapper-dev-client.89e34bae.js",
		"client/client.1364a155.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
